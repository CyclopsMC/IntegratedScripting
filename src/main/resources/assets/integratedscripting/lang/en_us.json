{
  "_comment": "General",
  "itemGroup.integratedscripting": "Integrated Scripting",
  "general.integratedscripting.description": "Create scripts for handling complex operations in Integrated Dynamics.",

  "_comment": "Blocks",
  "block.integratedscripting.mendesite": "Mendesite",

  "_comment": "Gui",
  "gui.integratedscripting.disk": "Disk",
  "gui.integratedscripting.script": "Script",
  "gui.integratedscripting.create_file": "Create File",
  "gui.integratedscripting.removal_dialog.title": "Confirm script deletion",
  "gui.integratedscripting.removal_dialog.message": "Do you want to delete \"%s\"?",
  "gui.integratedscripting.removal_dialog.delete": "Delete",
  "gui.integratedscripting.removal_dialog.keep": "Keep",
  "gui.integratedscripting.error.invalid_member": "Select a valid function name or variable name inside the script editor to bind with.",
  "gui.integratedscripting.error.invalid_member.current": "Current selection: \"%s\"",

  "_comment": "Value Type Translation",
  "valuetype.integratedscripting.error.translation.unknown_to_graal": "Could not find a translator from %s values to Graal.",
  "valuetype.integratedscripting.error.translation.unknown_to_graal_nbt": "Could not find a translator from %s values to Graal during NBT translation.",
  "valuetype.integratedscripting.error.translation.unknown_from_graal": "Could not find a translator from %s Graal values.",
  "valuetype.integratedscripting.error.translation.list_infinite": "Can not translate an infinite list into a scripting language.",
  "valuetype.integratedscripting.error.translation.nbt_unknown": "Can not translate NBT members of type %s.",
  "valuetype.integratedscripting.error.translation.nbt_unmatched": "Could not interpret the field %s as NBT.",

  "_comment": "Operators",
  "operator.integratedscripting.integratedscript.basename": "Integrated Script %s",
  "operator.integratedscripting.integratedscript.graal": "Graal Function",
  "operator.integratedscripting.error.no_graal_serialization": "Integrated Scripts can not be serialized",

  "_comment": "Script Variable",
  "script.integratedscripting.tooltip.disk": "§e§oDisk ID: §r§o%s",
  "script.integratedscripting.tooltip.path": "§e§oScript Path: §r§o%s",
  "script.integratedscripting.tooltip.member": "§e§oMember: §r§o%s",
  "script.integratedscripting.error.invalid_network": "No valid scripting network could be found.",
  "script.integratedscripting.error.disk_not_in_network": "Disk with id %s could not be found within the current network.",
  "script.integratedscripting.error.path_not_in_network": "Disk with id %s does not contain the script \"%s\".",
  "script.integratedscripting.error.member_not_in_network": "Disk with id %s does not contain the member \"%s\" in the script \"%s\".",
  "script.integratedscripting.error.unsupported_language": "The language of script \"%s\" is not supported.",
  "script.integratedscripting.error.script_read": "An error occurred when reading the script \"%s\" at disk %s: %s",
  "script.integratedscripting.error.script_exec": "An error occurred when executing the member \"%s\" in script \"%s\" at disk %s: %s",

  "_comment": "Items",
  "item.integratedscripting.scripting_disk": "Scripting Disk",
  "item.integratedscripting.scripting_disk.info": "Store scripts.",
  "item.integratedscripting.scripting_disk.id": "ID: %s",
  "item.integratedscripting.scripting_disk.bytes": "Bytes: %s",

  "_comment": "Blocks",
  "block.integratedscripting.scripting_drive": "Scripting Drive",
  "block.integratedscripting.scripting_drive.info": "Expose Scripting Disks to the network.",

  "_comment": "Part types",
  "parttype.integratedscripting.terminal_scripting": "Scripting Terminal",
  "parttype.integratedscripting.terminal_scripting.info": "Manage scripts from Scripting Drives in the network.",

  "_comment": "------ On the Dynamics of Integration contents ------",

  "info_book.integratedscripting.section.main": "Scripting",

  "info_book.integratedscripting.introduction": "Introduction",
  "info_book.integratedscripting.introduction.text1": "&lIntegrated Scripting&r is an extension to &lIntegrated Dynamics&r for creating scripts to handle complex operations in &lIntegrated Dynamics&r networks. By default, this mod ships with support for the JavaScript scripting language.",
  "info_book.integratedscripting.introduction.text2": "It allows you to define &lIntegrated Dynamics&r logic operations using a convenient scripting syntax instead of the standard visual variable card-based method, which can become cumbersome for advanced chains of operations.",
  "info_book.integratedscripting.introduction.text3": "For example, it allows you to easily define complex item list filters such as &o\"items that are damageable, are owned by mod X, and correspond to blocks that can be only mined with a diamond pickaxe.\"&r. Or &o\"get the item in this list with the second-largest stack size.\"&r",
  "info_book.integratedscripting.introduction.text4": "Basic programming knowledge is recommended when using this mod, but may be learnable through the tutorials later in this book.",

  "info_book.integratedscripting.materials": "Materials",
  "info_book.integratedscripting.materials.text1": "Before getting started with scripting, you will need some &lMendesite&r blocks. These blocks are very malleable, and form a good basis for the storage and handling of scripts. &lMendesite&r is created by combining &lMenril Resin&r and &lAndesite&r in a &lDrying Basin&r.",

  "info_book.integratedscripting.concepts": "Concepts",
  "info_book.integratedscripting.concepts.text1": "Editing, storing, and serving scripts to the network requires 3 elements: the &lScripting Terminal&r, &lScripting Disk&r, and &lScripting Drive&r",
  "info_book.integratedscripting.concepts.text2": "The &lScripting Disk&r is used to store raw script contents, but can not do anything on its own.",
  "info_book.integratedscripting.concepts.text3": "The &lScripting Drive&r allows you to insert a single &lScripting Disk&r, which will expose its contents to the network.",
  "info_book.integratedscripting.concepts.text4": "The &lScripting Terminal&r allows you to view, manage, and edit all scripts in the current network that are exposed by &lScripting Drives&r.",
  "info_book.integratedscripting.concepts.text5": "Each of these elements will be discussed in more detail hereafter.",

  "info_book.integratedscripting.disk": "Scripting Disk",
  "info_book.integratedscripting.disk.text1": "&lScripting Disks&r are responsible for storing scripts, and are to be inserted into &lScripting Drives&r. They can be created by combining some &lVariable Cards&r with &lMendesite&r.",
  "info_book.integratedscripting.disk.text2": "Once a &lScripting Disk&r has been inserted into a &lScripting Drive&r, they will obtain a unique numerical identifier. This identifier will be used to modify scripts on this disk from within the &lScripting Terminal&r. The identifier is also used to link script elements to &lVariable Cards&r.",
  "info_book.integratedscripting.disk.text3": "A &lScripting Disk&r can safely be moved to another &lScripting Disk&r without loss of script data, even when on a different network. &lVariable Cards&r that refer to this script's identifier will however start throwing errors when not on the same network anymore.",
  "info_book.integratedscripting.disk.text4": "A &lScripting Disk&r has no limit in terms of its storage size, but splitting up scripts across multiple disks is recommended for management reasons.",

  "info_book.integratedscripting.drive": "Scripting Drive",
  "info_book.integratedscripting.drive.text1": "Each &lScripting Drive&r is a block that is connected to your &lIntegrated Dynamics&r network that accepts a single &lScripting Disk&r, which allows the disk's script contents to be exposed to the network.",
  "info_book.integratedscripting.drive.text2": "It is crafted by combining a &lVariable Store&r and &lJukebox&r with some &lScripting Disks&r.",

  "info_book.integratedscripting.terminal": "Scripting Terminal",
  "info_book.integratedscripting.terminal.text1": "The &lScripting Terminal&r is a part that must be connected to your &lIntegrated Dynamics&r network to manage the scripts stored in the &lScripting Disks&r of this network.",
  "info_book.integratedscripting.terminal.text2": "When right-clicking on a placed terminal, a simplified &oIntegrated Development Environment&r (IDE) will be shown using which you can edit scripts.",
  "info_book.integratedscripting.terminal.text3": "On the top-left side of the screen, you can select the identifier of a &lScripting Disk&r that is connected to the network, after which all script files stored in this disk will be shown in the script file list below.",
  "info_book.integratedscripting.terminal.text4": "If the disk does not contain any script files yet, you can create them by clicking on the \"+\"-button on the bottom-left side of the screen.",
  "info_book.integratedscripting.terminal.text5": "The script file list on the left-hand side of the screen is used to select a script for editing. When clicking on a script, its editable contents will show up on the right-hand-side of the screen.",
  "info_book.integratedscripting.terminal.text6": "The text field on the right-hand side of the screen allows you to edit the contents of script files, which will be saved automatically after each modification.",
  "info_book.integratedscripting.terminal.text7": "While the editor will perform limited syntax highlighting, it is not able to detect syntax errors at this time. Syntax errors will be reported when executing scripts via &lVariable Cards&r.",
  "info_book.integratedscripting.terminal.text8": "In order to use a script member as &lIntegrated Dynamics&r logic, you can bind it to a &lVariable Cards&r.",
  "info_book.integratedscripting.terminal.text9": "You can do this by first selecting a script member in the text editor by selecting it with your cursor, such as a variable name or function name.",
  "info_book.integratedscripting.terminal.text10": "After that, you can insert a &lVariable Card&r into the slot on the right-hand side of the screen to bind it to this script member.",
  "info_book.integratedscripting.terminal.text11": "This &lVariable Card&r can now be used elsewhere in the network, by for example showing a variable member inside a &lDisplay Panel&r, or by using a function member as operator in an item list filter.",
  "info_book.integratedscripting.terminal.text12": "The next chapter will provide more details on how to write scripts.",

  "info_book.integratedscripting.writing": "Writing Scripts",

  "info_book.integratedscripting.writing.js": "JavaScript",
  "info_book.integratedscripting.writing.js.text1": "This mod allows scripts to be written in the JavaScript syntax. All features allowed by ECMAScript (ECMA-262) are available.",
  "info_book.integratedscripting.writing.js.text2": "Note that Node.js-specific functionality such as &orequire&r and &ofs&r is not available. If you're used to developing Node.js applications, you can make them compatible using external tools such as Webpack.",

  "info_book.integratedscripting.writing.variables": "Constants and Variables",
  "info_book.integratedscripting.writing.variables.text1": "All Integrated Dynamics value types that you're used to (such as &6Integers&0, &9Booleans&0, &8Items&0, ...) are available in JavaScript, and vice versa.",
  "info_book.integratedscripting.writing.variables.text2": "The most straightforward way to create a value in JavaScript and make it available in a static &lVariable Card&r value, is by defining a variable member in JavaScript using &olet&r or &oconst&r.",
  "info_book.integratedscripting.writing.variables.text3": "&olet&r defines variables that are re-assignable later in the script, such as counters. &oconst&r defines variables that can not be re-assigned.",
  "info_book.integratedscripting.writing.variables.text4": "In order to use this value in a &lVariable Card&r, you need to select the variable member name inside the Scripting Terminal text editor, and then insert an empty &lVariable Card&r in the right-hand slot. You can now use this &lVariable Card&r as you're used to, such as visualizing its value in a &lDisplay Panel&r.",
  "info_book.integratedscripting.writing.variables.text5": "Creating variables via JavaScript is mainly useful if you need to create complex values that are not easy to create using the &lLogic Programmer&r, such as long &4Strings&0 with a specific value. Below, you can find some examples of how to create such values.",

  "info_book.integratedscripting.writing.functions": "Functions",
  "info_book.integratedscripting.writing.functions.text1": "As &2Operator&0 are first-class citizens in Integrated Dynamics logic, they can also be created as JavaScript functions.",
  "info_book.integratedscripting.writing.functions.text2": "Any way of creating JavaScript functions can be used to create &2Operators&0, such as via the &ofunction&r keyword, or by creating custom lambdas.",
  "info_book.integratedscripting.writing.functions.text3": "Functions accept a number of arguments, which –when executed through Integrated Dynamics logic– will receive regular Integrated Dynamics values that are translated into JavaScript values.",
  "info_book.integratedscripting.writing.functions.text4": "Binding JavaScript functions to a &lVariable Card&r as &2Operator&0, is done just like with constants and variables, by selecting the function member name in the Scripting Terminal text editor and binding it to a &lVariable Card&r. This value can now be used anywhere an &2Operator&0 is accepted.",
  "info_book.integratedscripting.writing.functions.text5": "For example, you can create a function with a single &8Item&0 argument that returns a &9Boolean&0 to use as filter &2Operator&0 for filtering a list of items that you read from a Chest.",
  "info_book.integratedscripting.writing.functions.text6": "Below, you can find examples of different types of functions that could be created.",

  "info_book.integratedscripting.writing.globals": "Global functions",
  "info_book.integratedscripting.writing.globals.text1": "When writing JavaScript code, you can make use of the global &oidContext&r variable to access all Integrated Dynamics operators as functions through the &oops&r field. This allows you to make use of built-in operators when creating new ones.",
  "info_book.integratedscripting.writing.globals.text2": "For example, you can write an &8Item&0 filter that checks if an item is stackable and if it has a stack size of at least 16, as shown below.",
  "info_book.integratedscripting.writing.globals.text3": "To know what the name is of the operator you want to execute, you can look at their global name via the operator tooltips inside the &lLogic Programmer&r or in the list of operators in the Logic Programming section of this book.",
  "info_book.integratedscripting.writing.globals.text4": "Since invoking operators via &oidContext&r can become quite verbose, you can choose to store operators in a custom constant variable, as shown in the second example. Alternatively, you can make use of &oobject methods&r, which are discussed in the next section.",

  "info_book.integratedscripting.writing.methods": "Object methods",
  "info_book.integratedscripting.writing.methods.text1": "To counter the verbosity of global functions, you can write code more compactly using &lobject methods&r.",
  "info_book.integratedscripting.writing.methods.text2": "Object value types such as &8Blocks&0, &8Items&0, &8Fluids&0, ... will have &lmethods&r attached to them when used in JavaScript.",
  "info_book.integratedscripting.writing.methods.text3": "Object methods are just plain functions, but their first argument is tied to the object value.",
  "info_book.integratedscripting.writing.methods.text4": "For example, the global function &oitemstackStackable&r takes a single &8Item&0 argument and outputs a &9Boolean&0. This function is available as a method on &8Item&0 values via the name &ostackable&r, which takes zero arguments.",
  "info_book.integratedscripting.writing.methods.text5": "Global functions that accept two or more arguments will be available as method on object values, with all arguments shifted by one. For example, the global function &oitemstackStrength&r accepts an &8Item&0 and a &8Block&0 argument, but is also available as method on &8Items&0 with a single &8Block&0 argument.",

  "info_book.integratedscripting.advanced": "Advanced",

  "info_book.integratedscripting.advanced.transient_storage": "Transient Storage",
  "info_book.integratedscripting.advanced.transient_storage.text1": "Since Integrated Dynamics is based on functional programming principles, keeping track of states is mainly non-existent, except through external approaches such as the &lDelayer&r.",
  "info_book.integratedscripting.advanced.transient_storage.text2": "As the JavaScript language offers a mix of both functional and imperative programming, keeping track of states becomes partially possible.",
  "info_book.integratedscripting.advanced.transient_storage.text3": "Concretely, if you declare a mutable variable outside of functions (for example using &olet&r), you can modify its values through function invocations.",
  "info_book.integratedscripting.advanced.transient_storage.text4": "This way, you can keep track of states, such as counting the number of function calls, or calculating the running average of specific values.",
  "info_book.integratedscripting.advanced.transient_storage.text5": "An important catch to these variables is that their state is only transient. Concretely, this means that their values can be reset any time a variable card in the network is re-inserted, or when the server restarted.",
  "info_book.integratedscripting.advanced.transient_storage.text6": "As such, you can not assume these values to always remain present. If you need persistent data storage, it is better to make use of the &lDelayer&r.",

  "info_book.integratedscripting.advanced.external_editing": "External Editing",
  "info_book.integratedscripting.advanced.external_editing.text1": "If you have access to the file system on which your singleplayer or multiplayer game is running, you can access script files through any external editor. This allows you to create scripts using your favorite IDE (such as Vi, but definitely not Emacs).",
  "info_book.integratedscripting.advanced.external_editing.text2": "Script files are accessible via the &oworld/integratedscripting/&r directory (see &osaves/&r for singleplayer worlds). In here, you will find directories for all &lScripting Disks&r by their id. Inside of each &lScripting Disk&r directory, you will find all script files stored in that disk.",
  "info_book.integratedscripting.advanced.external_editing.text3": "You can safely modify these script files through an external editor, even if the game is running. After externally saving the file, they will be updated automatically in the game, and dependent variables will be updated as well.",
  "info_book.integratedscripting.advanced.external_editing.text4": "If your external editor supports this (modern IDEs do), modifying a script file through the &lScripting Terminal&r will also cause the files to be updated in your external editor.",

  "info_book.integratedscripting.advanced.logging": "Logging",
  "info_book.integratedscripting.advanced.logging.text1": "For complex scripts, the need may arise to debug them by temporarily writing to external log files.",
  "info_book.integratedscripting.advanced.logging.text2": "JavaScript allows you to call functions such as &oconsole.log()&r and &oconsole.error()&r to write messages to respectively the &oStandard Out&r and &oStandard Error&r output streams.",
  "info_book.integratedscripting.advanced.logging.text3": "When calling any of these functions, log messages will respectively be written to script-dependent &o.stdoutr and &o.stderr&r files.",
  "info_book.integratedscripting.advanced.logging.text4": "For example, if your script is located in &omyfile.js&r, log messages will be written to &omyfile.js.stdout&r.",
  "info_book.integratedscripting.advanced.logging.text5": "These &o.stdoutr and &o.stderr&r files are accessible via your &lScripting Terminal&r or through external editing.",
  "info_book.integratedscripting.advanced.logging.text6": "To avoid log files to become too large, they are capped in their size. By default, they are limited to 2096 lines. Consult your server admin if you are in need of more lines.",

  "info_book.integratedscripting.advanced.typescript": "TypeScript",
  "info_book.integratedscripting.advanced.typescript.text1": "The TypeScript language is a well-known superset of the JavaScript language that adds typing support. This allows developers to write type-safe JavaScript, by defining the types of variables and functions.",
  "info_book.integratedscripting.advanced.typescript.text2": "While Integrated Scripting only supports pure JavaScript, a TypeScript &otypings file&r is available for all available global functions, value types, and their methods.",
  "info_book.integratedscripting.advanced.typescript.text3": "When editing your scripts through an external IDE, this typings file could be loaded to create type-safe scripts. This is only recommended if you know TypeScript and know how to use it.",
  "info_book.integratedscripting.advanced.typescript.text4": "The typings file is available at &oworld/integratedscripting/integratedscripting.d.ts&r (see &osaves/&r for singleplayer worlds). This file is automatically re-generated upon every world restart, so you should not manually adjust this file.",

  "info_book.integratedscripting.section.tutorials": "Scripting Tutorials",

  "info_book.integratedscripting.tutorials.introduction": "Introduction",
  "info_book.integratedscripting.tutorials.introduction.text1": "This section contains several tutorials that help you to learn &lIntegrated Scripting&r, the &lIntegrated Dynamics&r add-on for creating scripts to handle complex operations."
}